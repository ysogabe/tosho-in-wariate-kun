/**
 * ‰ªäÊó•„ÅÆÂΩìÁï™„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„ÅÆ„ÉÜ„Çπ„Éà (TDD - Red Phase)
 */

import React from 'react'
import { render, screen, waitFor, fireEvent } from '@testing-library/react'
import { TodayDuties } from '../today-duties-simple'

// SWR„Çí„É¢„ÉÉ„ÇØ
jest.mock('swr', () => ({
  __esModule: true,
  default: jest.fn(),
}))

// Next.js„ÅÆLink„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„Çí„É¢„ÉÉ„ÇØ
jest.mock('next/link', () => {
  return function MockLink({ children, href, ...props }: any) {
    return <a href={href} {...props}>{children}</a>
  }
})

// shadcn-ui „Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„Çí„É¢„ÉÉ„ÇØ
jest.mock('@/components/ui/card', () => ({
  Card: ({ children, ...props }: any) => <div data-testid="card" {...props}>{children}</div>,
  CardContent: ({ children, ...props }: any) => <div data-testid="card-content" {...props}>{children}</div>,
  CardHeader: ({ children, ...props }: any) => <div data-testid="card-header" {...props}>{children}</div>,
  CardTitle: ({ children, ...props }: any) => <div data-testid="card-title" {...props}>{children}</div>,
}))

jest.mock('@/components/ui/button', () => ({
  Button: ({ children, onClick, ...props }: any) => (
    <button onClick={onClick} {...props}>{children}</button>
  ),
}))

jest.mock('@/components/ui/alert', () => ({
  Alert: ({ children, ...props }: any) => <div data-testid="alert" {...props}>{children}</div>,
  AlertDescription: ({ children, ...props }: any) => <div data-testid="alert-description" {...props}>{children}</div>,
}))

// lucide-react „Ç¢„Ç§„Ç≥„É≥„Çí„É¢„ÉÉ„ÇØ
jest.mock('lucide-react', () => ({
  RefreshCw: () => <div data-testid="refresh-icon" />,
  AlertCircle: () => <div data-testid="alert-icon" />,
  Calendar: () => <div data-testid="calendar-icon" />,
}))

const mockUseSWR = require('swr').default

describe('TodayDuties', () => {
  beforeEach(() => {
    jest.clearAllMocks()
  })

  describe('„É≠„Éº„Éá„Ç£„É≥„Ç∞Áä∂ÊÖã', () => {
    it('„É≠„Éº„Éá„Ç£„É≥„Ç∞‰∏≠„ÅØÈÅ©Âàá„Å™„É°„ÉÉ„Çª„Éº„Ç∏„ÇíË°®Á§∫„Åô„Çã', () => {
      mockUseSWR.mockReturnValue({
        data: undefined,
        error: undefined,
        isLoading: true,
        mutate: jest.fn(),
      })

      render(<TodayDuties />)

      expect(screen.getByText('üåü ‰ªäÊó•„ÅÆÂΩìÁï™')).toBeInTheDocument()
      expect(screen.getByText('‰ªäÊó•„ÅÆÂΩìÁï™„ÇíÁ¢∫Ë™ç‰∏≠...')).toBeInTheDocument()
      expect(screen.getByText('Â∞ë„ÄÖ„ÅäÂæÖ„Å°„Åè„Å†„Åï„ÅÑ')).toBeInTheDocument()
    })
  })

  describe('„Ç®„É©„ÉºÁä∂ÊÖã', () => {
    it('„Ç®„É©„ÉºÊôÇ„ÅØÈÅ©Âàá„Å™„É°„ÉÉ„Çª„Éº„Ç∏„Å®ÂÜçË©¶Ë°å„Éú„Çø„É≥„ÇíË°®Á§∫„Åô„Çã', () => {
      const mockMutate = jest.fn()
      mockUseSWR.mockReturnValue({
        data: undefined,
        error: new Error('API Error'),
        isLoading: false,
        mutate: mockMutate,
      })

      render(<TodayDuties />)

      expect(screen.getByText('üåü ‰ªäÊó•„ÅÆÂΩìÁï™')).toBeInTheDocument()
      expect(screen.getByText('ÂΩìÁï™ÊÉÖÂ†±„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü')).toBeInTheDocument()
      
      const retryButton = screen.getByText('ÂÜçË©¶Ë°å')
      expect(retryButton).toBeInTheDocument()
      
      fireEvent.click(retryButton)
      expect(mockMutate).toHaveBeenCalled()
    })

    it('API„ÅÆ„É¨„Çπ„Éù„É≥„Çπ„Ååsuccess„Ååfalse„ÅÆÂ†¥Âêà„ÇÇ„Ç®„É©„Éº„Å®„Åó„Å¶Êâ±„ÅÜ', () => {
      const mockMutate = jest.fn()
      mockUseSWR.mockReturnValue({
        data: { success: false },
        error: undefined,
        isLoading: false,
        mutate: mockMutate,
      })

      render(<TodayDuties />)

      expect(screen.getByText('ÂΩìÁï™ÊÉÖÂ†±„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü')).toBeInTheDocument()
      expect(screen.getByText('ÂÜçË©¶Ë°å')).toBeInTheDocument()
    })
  })

  describe('ÂúüÊó•„ÅÆÂ†¥Âêà', () => {
    it('ÂúüÊó•„ÅÆÂ†¥Âêà„ÅØÂΩìÁï™„Å™„Åó„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏„ÇíË°®Á§∫„Åô„Çã', () => {
      mockUseSWR.mockReturnValue({
        data: {
          success: true,
          data: {
            date: '2025-07-05',
            dayOfWeek: 'saturday',
            isWeekend: true,
            duties: [],
          },
        },
        error: undefined,
        isLoading: false,
        mutate: jest.fn(),
      })

      render(<TodayDuties />)

      expect(screen.getByText('üåü ‰ªäÊó•„ÅÆÂΩìÁï™')).toBeInTheDocument()
      expect(screen.getByText('üìÖ ‰ªäÊó•: 7Êúà5Êó•(Âúü)')).toBeInTheDocument()
      expect(screen.getByText('‰ªäÊó•„ÅØÂΩìÁï™„Åå„ÅÇ„Çä„Åæ„Åõ„Çì')).toBeInTheDocument()
      expect(screen.getByText('ÂúüÊõúÊó•„ÉªÊó•ÊõúÊó•„ÅØÂõ≥Êõ∏ÂßîÂì°„ÅÆÂΩìÁï™„ÅØ„Åä‰ºë„Åø„Åß„Åô')).toBeInTheDocument()
    })
  })

  describe('Âπ≥Êó•„ÅßÂΩìÁï™„Å™„Åó„ÅÆÂ†¥Âêà', () => {
    it('Âπ≥Êó•„ÅßÂΩìÁï™„Å™„Åó„ÅÆÂ†¥Âêà„ÅØÈÅ©Âàá„Å™„É°„ÉÉ„Çª„Éº„Ç∏„Å®„É™„É≥„ÇØ„ÇíË°®Á§∫„Åô„Çã', () => {
      mockUseSWR.mockReturnValue({
        data: {
          success: true,
          data: {
            date: '2025-07-07',
            dayOfWeek: 'monday',
            isWeekend: false,
            duties: [],
          },
        },
        error: undefined,
        isLoading: false,
        mutate: jest.fn(),
      })

      render(<TodayDuties />)

      expect(screen.getByText('üåü ‰ªäÊó•„ÅÆÂΩìÁï™')).toBeInTheDocument()
      expect(screen.getByText('üìÖ ‰ªäÊó•: 7Êúà7Êó•(Êúà)')).toBeInTheDocument()
      expect(screen.getByText('‰ªäÊó•„ÅÆÂΩìÁï™„ÅØË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì')).toBeInTheDocument()
      expect(screen.getByText('„Çπ„Ç±„Ç∏„É•„Éº„É´ÁÆ°ÁêÜ„Åã„ÇâÂΩìÁï™Ë°®„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ')).toBeInTheDocument()
      
      const scheduleLink = screen.getByText('„Çπ„Ç±„Ç∏„É•„Éº„É´ÁÆ°ÁêÜ')
      expect(scheduleLink.closest('a')).toHaveAttribute('href', '/admin/schedules')
    })
  })

  describe('ÂΩìÁï™„ÅÇ„Çä„ÅÆÂ†¥Âêà', () => {
    it('ÂΩìÁï™„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅØÈÅ©Âàá„Å´Ë°®Á§∫„Åô„Çã', () => {
      mockUseSWR.mockReturnValue({
        data: {
          success: true,
          data: {
            date: '2025-07-07',
            dayOfWeek: 'monday',
            isWeekend: false,
            duties: [
              {
                roomId: 'room-1',
                roomName: 'Âõ≥Êõ∏ÂÆ§1',
                student: {
                  name: 'Áî∞‰∏≠Ëä±Â≠ê',
                  class: {
                    year: 5,
                    name: '2ÁµÑ',
                  },
                },
              },
              {
                roomId: 'room-2',
                roomName: 'Âõ≥Êõ∏ÂÆ§2',
                student: {
                  name: '‰ΩêËó§Â§™ÈÉé',
                  class: {
                    year: 6,
                    name: '1ÁµÑ',
                  },
                },
              },
            ],
          },
        },
        error: undefined,
        isLoading: false,
        mutate: jest.fn(),
      })

      render(<TodayDuties />)

      expect(screen.getByText('üåü ‰ªäÊó•„ÅÆÂΩìÁï™')).toBeInTheDocument()
      expect(screen.getByText('üìÖ ‰ªäÊó•: 7Êúà7Êó•(Êúà)')).toBeInTheDocument()
      
      // Âõ≥Êõ∏ÂÆ§1„ÅÆÂΩìÁï™
      expect(screen.getByText('Âõ≥Êõ∏ÂÆ§1')).toBeInTheDocument()
      expect(screen.getByText('Áî∞‰∏≠Ëä±Â≠ê')).toBeInTheDocument()
      expect(screen.getByText('5Âπ¥2ÁµÑ')).toBeInTheDocument()
      
      // Âõ≥Êõ∏ÂÆ§2„ÅÆÂΩìÁï™
      expect(screen.getByText('Âõ≥Êõ∏ÂÆ§2')).toBeInTheDocument()
      expect(screen.getByText('‰ΩêËó§Â§™ÈÉé')).toBeInTheDocument()
      expect(screen.getByText('6Âπ¥1ÁµÑ')).toBeInTheDocument()
      
      // Âä±„Åæ„Åó„É°„ÉÉ„Çª„Éº„Ç∏
      expect(screen.getByText('‚≠ê ‰ªäÊó•„ÅÆÂõ≥Êõ∏ÂßîÂì°„ÅÆÁöÜ„Åï„Çì„ÄÅ„Çà„Çç„Åó„Åè„ÅäÈ°ò„ÅÑ„Åó„Åæ„ÅôÔºÅ')).toBeInTheDocument()
    })
  })

  describe('Êó•‰ªò„Éï„Ç©„Éº„Éû„ÉÉ„Éà', () => {
    const dateTests = [
      { date: '2025-07-07', dayOfWeek: 'monday', expected: '7Êúà7Êó•(Êúà)' },
      { date: '2025-07-08', dayOfWeek: 'tuesday', expected: '7Êúà8Êó•(ÁÅ´)' },
      { date: '2025-07-09', dayOfWeek: 'wednesday', expected: '7Êúà9Êó•(Ê∞¥)' },
      { date: '2025-07-10', dayOfWeek: 'thursday', expected: '7Êúà10Êó•(Êú®)' },
      { date: '2025-07-11', dayOfWeek: 'friday', expected: '7Êúà11Êó•(Èáë)' },
      { date: '2025-07-05', dayOfWeek: 'saturday', expected: '7Êúà5Êó•(Âúü)' },
      { date: '2025-07-06', dayOfWeek: 'sunday', expected: '7Êúà6Êó•(Êó•)' },
    ]

    dateTests.forEach(({ date, dayOfWeek, expected }) => {
      it(`${dayOfWeek}„ÅÆÊó•‰ªò„Éï„Ç©„Éº„Éû„ÉÉ„Éà„ÅåÊ≠£„Åó„ÅÑ`, () => {
        mockUseSWR.mockReturnValue({
          data: {
            success: true,
            data: {
              date,
              dayOfWeek,
              isWeekend: dayOfWeek === 'saturday' || dayOfWeek === 'sunday',
              duties: [],
            },
          },
          error: undefined,
          isLoading: false,
          mutate: jest.fn(),
        })

        render(<TodayDuties />)

        expect(screen.getByText(`üìÖ ‰ªäÊó•: ${expected}`)).toBeInTheDocument()
      })
    })
  })

  describe('„É™„Éï„É¨„ÉÉ„Ç∑„É•Ê©üËÉΩ', () => {
    it('„Ç®„É©„ÉºÊôÇ„ÅÆÂÜçË©¶Ë°å„Éú„Çø„É≥„Åß„É™„Éï„É¨„ÉÉ„Ç∑„É•„Åô„Çã', () => {
      const mockMutate = jest.fn()
      mockUseSWR.mockReturnValue({
        data: undefined,
        error: new Error('API Error'),
        isLoading: false,
        mutate: mockMutate,
      })

      render(<TodayDuties />)

      const retryButton = screen.getByText('ÂÜçË©¶Ë°å')
      fireEvent.click(retryButton)

      expect(mockMutate).toHaveBeenCalled()
    })
  })
})