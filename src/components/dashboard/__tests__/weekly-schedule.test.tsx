/**
 * ÈÄ±Èñì„Çπ„Ç±„Ç∏„É•„Éº„É´Ë°®Á§∫„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„ÅÆ„ÉÜ„Çπ„Éà (TDD - Red Phase)
 */

import { render, screen, fireEvent, waitFor } from '@testing-library/react'
import { WeeklySchedule } from '../weekly-schedule'

// SWR„ÅÆ„É¢„ÉÉ„ÇØ
jest.mock('swr', () => ({
  __esModule: true,
  default: jest.fn(),
}))

// Next.js„ÅÆLink„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„Çí„É¢„ÉÉ„ÇØ
jest.mock('next/link', () => {
  return function MockLink({
    children,
    href,
    ...props
  }: {
    children: React.ReactNode
    href: string
    [key: string]: unknown
  }) {
    return (
      <a href={href} {...props}>
        {children}
      </a>
    )
  }
})

// React-to-print„ÅÆ„É¢„ÉÉ„ÇØ
jest.mock('react-to-print', () => ({
  useReactToPrint: jest.fn(() => jest.fn()),
}))

// eslint-disable-next-line @typescript-eslint/no-require-imports
const mockSWR = require('swr').default
// eslint-disable-next-line @typescript-eslint/no-require-imports
const mockUseReactToPrint = require('react-to-print').useReactToPrint

// Global fetch mock
global.fetch = jest.fn()

describe('WeeklySchedule', () => {
  // Helper function to set up SWR mock
  const setupSWRMock = (options: {
    data?: any
    error?: Error | null
    isLoading?: boolean
  }) => {
    // Mock SWR to handle the URL pattern with retry parameter
    mockSWR.mockImplementation((url: string) => {
      // Handle schedules API URLs (with or without retry parameter)
      if (url.includes('/api/schedules')) {
        return {
          data: options.data || null,
          error: options.error || null,
          isLoading: options.isLoading || false,
          mutate: jest.fn(),
        }
      }
      return {
        data: null,
        error: null,
        isLoading: false,
        mutate: jest.fn(),
      }
    })
  }

  beforeEach(() => {
    jest.clearAllMocks()

    // ÁèæÂú®„ÅÆÊó•‰ªò„Çí„É¢„ÉÉ„ÇØÔºàÊúàÊõúÊó•„Å´Ë®≠ÂÆöÔºâ
    const mockDate = new Date('2025-07-07T10:00:00Z') // ÊúàÊõúÊó•
    jest.spyOn(global, 'Date').mockImplementation(() => mockDate)

    // react-to-print„ÅÆ„É¢„ÉÉ„ÇØË®≠ÂÆö
    mockUseReactToPrint.mockReturnValue(jest.fn())
  })

  afterEach(() => {
    jest.restoreAllMocks()
  })

  const mockWeeklyScheduleData = {
    success: true,
    data: {
      assignments: [
        // ÊúàÊõúÊó•
        {
          id: 'assignment-1',
          dayOfWeek: 1,
          room: { id: 'room-1', name: 'Âõ≥Êõ∏ÂÆ§1' },
          student: { name: 'Áî∞‰∏≠', class: { year: 5, name: '2' } },
        },
        {
          id: 'assignment-2',
          dayOfWeek: 1,
          room: { id: 'room-2', name: 'Âõ≥Êõ∏ÂÆ§2' },
          student: { name: '‰ΩêËó§', class: { year: 6, name: '1' } },
        },
        // ÁÅ´ÊõúÊó•
        {
          id: 'assignment-3',
          dayOfWeek: 2,
          room: { id: 'room-1', name: 'Âõ≥Êõ∏ÂÆ§1' },
          student: { name: 'Â±±Áî∞', class: { year: 6, name: '1' } },
        },
        {
          id: 'assignment-4',
          dayOfWeek: 2,
          room: { id: 'room-2', name: 'Âõ≥Êõ∏ÂÆ§2' },
          student: { name: '‰ºäËó§', class: { year: 5, name: '2' } },
        },
        // Ê∞¥ÊõúÊó•
        {
          id: 'assignment-5',
          dayOfWeek: 3,
          room: { id: 'room-1', name: 'Âõ≥Êõ∏ÂÆ§1' },
          student: { name: 'Èà¥Êú®', class: { year: 5, name: '1' } },
        },
        {
          id: 'assignment-6',
          dayOfWeek: 3,
          room: { id: 'room-2', name: 'Âõ≥Êõ∏ÂÆ§2' },
          student: { name: 'Ê∏°Ëæ∫', class: { year: 6, name: '3' } },
        },
        // Êú®ÊõúÊó•
        {
          id: 'assignment-7',
          dayOfWeek: 4,
          room: { id: 'room-1', name: 'Âõ≥Êõ∏ÂÆ§1' },
          student: { name: 'ÊùæÊú¨', class: { year: 6, name: '2' } },
        },
        {
          id: 'assignment-8',
          dayOfWeek: 4,
          room: { id: 'room-2', name: 'Âõ≥Êõ∏ÂÆ§2' },
          student: { name: 'Â∞èÊûó', class: { year: 5, name: '1' } },
        },
        // ÈáëÊõúÊó•
        {
          id: 'assignment-9',
          dayOfWeek: 5,
          room: { id: 'room-1', name: 'Âõ≥Êõ∏ÂÆ§1' },
          student: { name: 'È´òÊ©ã', class: { year: 5, name: '3' } },
        },
        {
          id: 'assignment-10',
          dayOfWeek: 5,
          room: { id: 'room-2', name: 'Âõ≥Êõ∏ÂÆ§2' },
          student: { name: 'Âä†Ëó§', class: { year: 6, name: '2' } },
        },
      ],
    },
  }

  const mockEmptyScheduleData = {
    success: true,
    data: {
      assignments: [],
    },
  }

  describe('Âü∫Êú¨ÁöÑ„Å™„É¨„É≥„ÉÄ„É™„É≥„Ç∞', () => {
    it('Ê≠£Â∏∏„Å´„É¨„É≥„ÉÄ„É™„É≥„Ç∞„Åï„Çå„Çã', () => {
      setupSWRMock({ data: mockWeeklyScheduleData })

      render(<WeeklySchedule />)

      expect(screen.getByText('üìã ‰ªäÈÄ±„ÅÆ„Çπ„Ç±„Ç∏„É•„Éº„É´')).toBeInTheDocument()
      expect(screen.getByText('üìäË©≥Á¥∞Ë°®Á§∫')).toBeInTheDocument()
      expect(screen.getByText('üñ®Ô∏èÂç∞Âà∑')).toBeInTheDocument()
    })

    it('„É≠„Éº„Éá„Ç£„É≥„Ç∞‰∏≠„ÅÆË°®Á§∫„ÅåÊ≠£„Åó„ÅèÂãï‰Ωú„Åô„Çã', () => {
      setupSWRMock({ isLoading: true })

      render(<WeeklySchedule />)

      expect(
        screen.getByText('„Çπ„Ç±„Ç∏„É•„Éº„É´„ÇíË™≠„ÅøËæº„Åø‰∏≠...')
      ).toBeInTheDocument()
      expect(screen.getByTestId('loading-spinner')).toBeInTheDocument()
    })

    it('„Ç®„É©„ÉºÊôÇ„ÅÆË°®Á§∫„ÅåÊ≠£„Åó„ÅèÂãï‰Ωú„Åô„Çã', () => {
      setupSWRMock({ error: new Error('API Error') })

      render(<WeeklySchedule />)

      expect(
        screen.getByText('„Çπ„Ç±„Ç∏„É•„Éº„É´„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü')
      ).toBeInTheDocument()
      expect(screen.getByText('ÂÜçË©¶Ë°å')).toBeInTheDocument()
    })
  })

  describe('ÈÄ±Èñì„Çπ„Ç±„Ç∏„É•„Éº„É´Ë°®Á§∫', () => {
    it('ÊõúÊó•„Éò„ÉÉ„ÉÄ„Éº„ÅåÊ≠£„Åó„ÅèË°®Á§∫„Åï„Çå„Çã', () => {
      setupSWRMock({ data: mockWeeklyScheduleData })

      render(<WeeklySchedule />)

      expect(screen.getByText('Êúà')).toBeInTheDocument()
      expect(screen.getByText('ÁÅ´')).toBeInTheDocument()
      expect(screen.getByText('Ê∞¥')).toBeInTheDocument()
      expect(screen.getByText('Êú®')).toBeInTheDocument()
      expect(screen.getByText('Èáë')).toBeInTheDocument()
    })

    it('Âõ≥Êõ∏ÂÆ§Âêç„ÅåÊ≠£„Åó„ÅèË°®Á§∫„Åï„Çå„Çã', () => {
      setupSWRMock({ data: mockWeeklyScheduleData })

      render(<WeeklySchedule />)

      expect(screen.getByText('Âõ≥Êõ∏ÂÆ§1')).toBeInTheDocument()
      expect(screen.getByText('Âõ≥Êõ∏ÂÆ§2')).toBeInTheDocument()
    })

    it('Â≠¶ÁîüÂêç„Å®„ÇØ„É©„Çπ„ÅåÊ≠£„Åó„ÅèË°®Á§∫„Åï„Çå„Çã', () => {
      setupSWRMock({ data: mockWeeklyScheduleData })

      render(<WeeklySchedule />)

      // ÊúàÊõúÊó•„ÅÆÂΩìÁï™ (today, so includes ‚òÖ)
      expect(screen.getByText('Áî∞‰∏≠‚òÖ')).toBeInTheDocument()
      expect(screen.getAllByText('5-2').length).toBeGreaterThan(0) // Multiple students in 5-2
      expect(screen.getByText('‰ΩêËó§‚òÖ')).toBeInTheDocument()
      expect(screen.getAllByText('6-1').length).toBeGreaterThan(0) // Multiple students in 6-1

      // ‰ªñ„ÅÆÊõúÊó•„ÅÆÂΩìÁï™ (no ‚òÖ since not today)
      expect(screen.getByText('Â±±Áî∞')).toBeInTheDocument()
      expect(screen.getByText('‰ºäËó§')).toBeInTheDocument()
    })

    it('‰ªäÊó•„ÅÆÂΩìÁï™„Å´‚òÖÂç∞„ÅåË°®Á§∫„Åï„Çå„Çã', () => {
      setupSWRMock({ data: mockWeeklyScheduleData })

      render(<WeeklySchedule />)

      // ÊúàÊõúÊó•Ôºà‰ªäÊó•Ôºâ„ÅÆÂΩìÁï™„Å´‚òÖÂç∞„Åå„ÅÇ„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
      expect(screen.getByText('Áî∞‰∏≠‚òÖ')).toBeInTheDocument()
      expect(screen.getByText('‰ΩêËó§‚òÖ')).toBeInTheDocument()

      // ‰ªñ„ÅÆÊõúÊó•„Å´„ÅØ‚òÖÂç∞„Åå„Å™„ÅÑ„Åì„Å®„ÇíÁ¢∫Ë™ç
      expect(screen.getByText('Â±±Áî∞')).toBeInTheDocument()
      expect(screen.getByText('‰ºäËó§')).toBeInTheDocument()
      expect(screen.queryByText('Â±±Áî∞‚òÖ')).not.toBeInTheDocument()
      expect(screen.queryByText('‰ºäËó§‚òÖ')).not.toBeInTheDocument()
    })

    it('„Çπ„Ç±„Ç∏„É•„Éº„É´„ÅåÁ©∫„ÅÆÂ†¥Âêà„ÅÆË°®Á§∫', () => {
      setupSWRMock({ data: mockEmptyScheduleData })

      render(<WeeklySchedule />)

      expect(screen.getByText('üìã ‰ªäÈÄ±„ÅÆ„Çπ„Ç±„Ç∏„É•„Éº„É´')).toBeInTheDocument()
      expect(
        screen.getByText('‰ªäÈÄ±„ÅÆ„Çπ„Ç±„Ç∏„É•„Éº„É´„ÅØ„Åæ„Å†‰ΩúÊàê„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì')
      ).toBeInTheDocument()
      expect(screen.getByText('„Çπ„Ç±„Ç∏„É•„Éº„É´ÁÆ°ÁêÜ')).toBeInTheDocument()
    })
  })

  describe('„Ç¢„ÇØ„Ç∑„Éß„É≥Ê©üËÉΩ', () => {
    it('Ë©≥Á¥∞Ë°®Á§∫„Éú„Çø„É≥„Åå„ÇØ„É™„ÉÉ„ÇØ„Åß„Åç„Çã', () => {
      setupSWRMock({ data: mockWeeklyScheduleData })

      render(<WeeklySchedule />)

      const detailButton = screen.getByText('üìäË©≥Á¥∞Ë°®Á§∫')
      expect(detailButton.closest('a')).toHaveAttribute(
        'href',
        '/admin/schedules?format=grid'
      )
    })

    it('Âç∞Âà∑„Éú„Çø„É≥„Åå„ÇØ„É™„ÉÉ„ÇØ„Åï„Çå„Çã', () => {
      const mockHandlePrint = jest.fn()
      mockUseReactToPrint.mockReturnValue(mockHandlePrint)

      setupSWRMock({ data: mockWeeklyScheduleData })

      render(<WeeklySchedule />)

      const printButton = screen.getByText('üñ®Ô∏èÂç∞Âà∑')
      fireEvent.click(printButton)

      expect(mockHandlePrint).toHaveBeenCalledTimes(1)
    })
  })

  describe('„Ç¢„ÇØ„Çª„Ç∑„Éì„É™„ÉÜ„Ç£', () => {
    it('ÈÅ©Âàá„Å™ARIAÂ±ûÊÄß„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Çã', () => {
      setupSWRMock({ data: mockWeeklyScheduleData })

      render(<WeeklySchedule />)

      const table = screen.getByRole('table', { name: '‰ªäÈÄ±„ÅÆ„Çπ„Ç±„Ç∏„É•„Éº„É´Ë°®' })
      expect(table).toBeInTheDocument()

      const columnHeaders = screen.getAllByRole('columnheader')
      expect(columnHeaders).toHaveLength(6) // Âõ≥Êõ∏ÂÆ§Âàó + 5Êó•Èñì

      const rowHeaders = screen.getAllByRole('rowheader')
      expect(rowHeaders).toHaveLength(2) // Âõ≥Êõ∏ÂÆ§1, Âõ≥Êõ∏ÂÆ§2
    })

    it('‰ªäÊó•„ÅÆÂΩìÁï™„Å´„Çπ„ÇØ„É™„Éº„É≥„É™„Éº„ÉÄ„ÉºÁî®„ÅÆË™¨Êòé„ÅåÂê´„Åæ„Çå„Å¶„ÅÑ„Çã', () => {
      setupSWRMock({ data: mockWeeklyScheduleData })

      render(<WeeklySchedule />)

      expect(screen.getByLabelText('‰ªäÊó•„ÅÆÂΩìÁï™')).toBeInTheDocument()
    })
  })

  describe('„É¨„Çπ„Éù„É≥„Ç∑„ÉñÂØæÂøú', () => {
    it('„É¢„Éê„Ç§„É´Ë°®Á§∫„Åß„Ç≥„É≥„Éë„ÇØ„Éà„É¨„Ç§„Ç¢„Ç¶„Éà„ÅåÈÅ©Áî®„Åï„Çå„Çã', () => {
      // „É¢„Éê„Ç§„É´ÁîªÈù¢ÂπÖ„Çí„Ç∑„Éü„É•„É¨„Éº„Éà
      Object.defineProperty(window, 'innerWidth', {
        writable: true,
        configurable: true,
        value: 375,
      })

      setupSWRMock({ data: mockWeeklyScheduleData })

      render(<WeeklySchedule />)

      const tableContainer = screen.getByTestId('weekly-schedule-table')
      expect(tableContainer).toHaveClass('overflow-x-auto')
    })
  })

  describe('Âç∞Âà∑ÂØæÂøú', () => {
    it('Âç∞Âà∑Áî®„ÅÆ„Çπ„Çø„Ç§„É´„ÅåÈÅ©Áî®„Åï„Çå„Çã', () => {
      setupSWRMock({ data: mockWeeklyScheduleData })

      render(<WeeklySchedule />)

      const printableSection = screen.getByTestId('printable-weekly-schedule')
      expect(printableSection).toBeInTheDocument()
      expect(printableSection).toHaveClass('print:bg-white')
    })

    it('Âç∞Âà∑ÊôÇ„Å´‰∏çË¶Å„Å™Ë¶ÅÁ¥†„ÅåÈùûË°®Á§∫„Å´„Å™„Çã', () => {
      setupSWRMock({ data: mockWeeklyScheduleData })

      render(<WeeklySchedule />)

      // Find the element with print:hidden class (the mt-4 print:hidden div)
      const printHiddenElement = screen.getByText('Ë©≥Á¥∞„Å™ÁÆ°ÁêÜ„ÇÑÁ∑®ÈõÜ„ÅØ„ÄåË©≥Á¥∞Ë°®Á§∫„Äç„Åã„ÇâË°å„Åà„Åæ„Åô').parentElement
      expect(printHiddenElement).toHaveClass('print:hidden')
    })
  })

  describe('„Éá„Éº„ÇøÂ§âÊèõ', () => {
    it('ÊõúÊó•„Åî„Å®„Å´„Éá„Éº„Çø„ÅåÊ≠£„Åó„Åè„Ç∞„É´„Éº„ÉóÂåñ„Åï„Çå„Çã', () => {
      setupSWRMock({ data: mockWeeklyScheduleData })

      render(<WeeklySchedule />)

      // ÂêÑÊõúÊó•„Å´Ê≠£„Åó„ÅÑÊï∞„ÅÆÂΩìÁï™„ÅåË°®Á§∫„Åï„Çå„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
      const mondayColumns = screen.getAllByTestId('day-column-1')
      expect(mondayColumns[0]).toHaveTextContent('Áî∞‰∏≠‚òÖ')
      expect(mondayColumns[1]).toHaveTextContent('‰ΩêËó§‚òÖ')

      const tuesdayColumns = screen.getAllByTestId('day-column-2')
      expect(tuesdayColumns[0]).toHaveTextContent('Â±±Áî∞')
      expect(tuesdayColumns[1]).toHaveTextContent('‰ºäËó§')
    })

    it('Âêå„ÅòÂõ≥Êõ∏ÂÆ§„ÅÆÂΩìÁï™„ÅåÊ≠£„Åó„ÅÑË°å„Å´„Åæ„Å®„ÇÅ„Çâ„Çå„Çã', () => {
      setupSWRMock({ data: mockWeeklyScheduleData })

      render(<WeeklySchedule />)

      const room1Row = screen.getByTestId('room-row-room-1')
      expect(room1Row).toHaveTextContent('Áî∞‰∏≠')
      expect(room1Row).toHaveTextContent('Â±±Áî∞')
      expect(room1Row).toHaveTextContent('Èà¥Êú®')

      const room2Row = screen.getByTestId('room-row-room-2')
      expect(room2Row).toHaveTextContent('‰ΩêËó§')
      expect(room2Row).toHaveTextContent('‰ºäËó§')
      expect(room2Row).toHaveTextContent('Ê∏°Ëæ∫')
    })
  })

  describe('„Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞', () => {
    it('„Éá„Éº„ÇøÂΩ¢Âºè„Åå‰∏çÊ≠£„Å™Â†¥Âêà„ÅÆÂá¶ÁêÜ', () => {
      setupSWRMock({ data: { success: false, error: 'Invalid data' } })

      render(<WeeklySchedule />)

      expect(
        screen.getByText('„Çπ„Ç±„Ç∏„É•„Éº„É´„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü')
      ).toBeInTheDocument()
    })

    it('ÂÜçË©¶Ë°å„Éú„Çø„É≥„ÅåÊ©üËÉΩ„Åô„Çã', async () => {
      const mockMutate = jest.fn()
      setupSWRMock({ 
        error: new Error('Network Error'),
        data: null
      })
      // Override the mutate function for this specific test
      mockSWR.mockImplementation((url: string) => {
        if (url.startsWith('/api/schedules')) {
          return {
            data: null,
            error: new Error('Network Error'),
            isLoading: false,
            mutate: mockMutate,
          }
        }
        return {
          data: null,
          error: null,
          isLoading: false,
          mutate: jest.fn(),
        }
      })

      render(<WeeklySchedule />)

      const retryButton = screen.getByText('ÂÜçË©¶Ë°å')
      fireEvent.click(retryButton)

      await waitFor(() => {
        expect(mockMutate).toHaveBeenCalledTimes(1)
      })
    })
  })
})
