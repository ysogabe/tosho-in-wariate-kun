name: CI

on:
  push:
    branches: [main, feature/**]
  pull_request:
    branches: [main]

jobs:
  test:
    name: Test & Build
    # REQUIRED: Must use self-hosted runner exclusively
    # DO NOT change to ubuntu-latest, windows-latest, or any GitHub-hosted runner
    runs-on: self-hosted
    permissions:
      contents: read
      pull-requests: write
      issues: write

    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run type check
        run: npm run type-check

      - name: Run linter
        run: npm run lint

      - name: Run unit tests
        run: npm run test:ci

      - name: Generate test summary
        if: matrix.node-version == '20.x'
        run: |
          echo "## Test Coverage Report 📊" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Coverage |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|----------|" >> $GITHUB_STEP_SUMMARY

          # Parse coverage from Jest output
          if [ -f "coverage/coverage-summary.json" ]; then
            STATEMENTS=$(cat coverage/coverage-summary.json | jq -r '.total.statements.pct')
            BRANCHES=$(cat coverage/coverage-summary.json | jq -r '.total.branches.pct')
            FUNCTIONS=$(cat coverage/coverage-summary.json | jq -r '.total.functions.pct')
            LINES=$(cat coverage/coverage-summary.json | jq -r '.total.lines.pct')
            
            echo "| Statements | ${STATEMENTS}% |" >> $GITHUB_STEP_SUMMARY
            echo "| Branches | ${BRANCHES}% |" >> $GITHUB_STEP_SUMMARY
            echo "| Functions | ${FUNCTIONS}% |" >> $GITHUB_STEP_SUMMARY
            echo "| Lines | ${LINES}% |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🎯 **Target**: 30% (MVP Phase)" >> $GITHUB_STEP_SUMMARY
            
            if [ "$(echo "$STATEMENTS >= 30" | awk '{print ($1 >= $3)}')" = "1" ]; then
              echo "✅ **Status**: Coverage target achieved!" >> $GITHUB_STEP_SUMMARY
            else
              echo "⚠️ **Status**: Below target coverage" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "| Overall | Unable to parse |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ Coverage summary not found" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload coverage reports to Codecov
        if: matrix.node-version == '20.x'
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Comment coverage on PR
        if: matrix.node-version == '20.x' && github.event_name == 'pull_request'
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            let coverageComment = '## 📊 Test Coverage Report\n\n';

            try {
              const coverageData = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
              const { statements, branches, functions, lines } = coverageData.total;
              
              coverageComment += '| Metric | Coverage | Status |\n';
              coverageComment += '|--------|----------|--------|\n';
              coverageComment += `| Statements | ${statements.pct}% | ${statements.pct >= 30 ? '✅' : '❌'} |\n`;
              coverageComment += `| Branches | ${branches.pct}% | ${branches.pct >= 30 ? '✅' : '❌'} |\n`;
              coverageComment += `| Functions | ${functions.pct}% | ${functions.pct >= 30 ? '✅' : '❌'} |\n`;
              coverageComment += `| Lines | ${lines.pct}% | ${lines.pct >= 30 ? '✅' : '❌'} |\n\n`;
              
              coverageComment += `🎯 **Target**: 30% (MVP Phase)\n`;
              coverageComment += `📈 **Overall**: ${statements.pct >= 30 ? '✅ Target achieved!' : '⚠️ Below target'}\n\n`;
              
              coverageComment += '_Generated by GitHub Actions CI_';
            } catch (error) {
              coverageComment += '⚠️ Unable to parse coverage data\n\n';
              coverageComment += '_Coverage report generation failed_';
            }

            // Find existing coverage comment
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const existingComment = comments.data.find(
              comment => comment.body.includes('📊 Test Coverage Report')
            );

            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: coverageComment
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: coverageComment
              });
            }

      - name: Build for production
        id: build
        run: |
          echo "Starting production build..."
          npm run build || {
            echo "Build failed. Checking for errors..."
            ls -la
            echo "Package.json scripts:"
            cat package.json | grep -A 5 -B 5 "build"
            exit 1
          }
          echo "Build completed successfully"
        env:
          NODE_ENV: production

      - name: Verify build output
        run: |
          if [ ! -d ".next" ]; then
            echo "Error: .next directory not found after build"
            exit 1
          fi
          echo "Build directory contents:"
          ls -la .next/
          echo "Current working directory:"
          pwd
          echo "All directories in current path:"
          ls -la

      - name: List build output before upload
        if: success() && steps.build.outcome == 'success'
        run: |
          echo "Checking .next directory before upload:"
          if [ -d ".next" ]; then
            echo ".next directory exists"
            echo "Size of .next:"
            du -sh .next
            echo "Files in .next:"
            find .next -type f | head -20
          else
            echo ".next directory NOT found!"
            echo "Looking for .next in other locations:"
            find . -name ".next" -type d 2>/dev/null || true
          fi

      - name: Upload build artifacts
        if: success() && steps.build.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ matrix.node-version }}
          path: .next
          retention-days: 1
          if-no-files-found: warn

      - name: Check build size
        if: matrix.node-version == '20.x'
        run: |
          echo "Build completed successfully"
          ls -la .next/
          du -sh .next/

  playwright-tests:
    name: Playwright E2E Tests
    # REQUIRED: Must use self-hosted runner exclusively  
    runs-on: self-hosted
    needs: test
    permissions:
      contents: read
      pull-requests: write
      actions: read
      pages: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: |
          echo "Installing Playwright browsers..."
          npx playwright install --with-deps

      - name: Setup test database
        run: |
          echo "Setting up test database for E2E tests..."
          npm run test:e2e:setup
        env:
          NODE_ENV: test
          DATABASE_URL: file:./e2e-test.db

      - name: Download build artifacts
        id: download-artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-20.x
          path: .next
        continue-on-error: true

      - name: Check artifact download status
        if: steps.download-artifacts.outcome == 'failure'
        run: |
          echo "Failed to download build artifacts. Building locally..."
          npm run build
        env:
          NODE_ENV: production

      - name: Verify build artifacts
        run: |
          echo "Verifying build artifacts..."
          if [ ! -d ".next" ]; then
            echo "Error: .next directory not found"
            exit 1
          fi
          if [ ! -f ".next/package.json" ] && [ ! -f ".next/BUILD_ID" ]; then
            echo "Error: Build artifacts appear to be incomplete"
            exit 1
          fi
          ls -la .next/
          du -sh .next/
          echo "Build verification complete - ready for E2E testing"

      - name: Start Next.js application
        run: |
          echo "Starting Next.js application in background..."
          npm run start &
          APP_PID=$!
          echo "APP_PID=$APP_PID" >> $GITHUB_ENV
          echo "Waiting for application to be ready..."
          npx wait-on http://localhost:3000 --timeout 60000
          echo "Application is ready on http://localhost:3000"
        env:
          NODE_ENV: production
          DATABASE_URL: file:./e2e-test.db
          NEXTAUTH_URL: http://localhost:3000
          NEXTAUTH_SECRET: test-secret-for-e2e-tests

      - name: Run Playwright tests against production build
        run: npm run test:e2e:ci
        timeout-minutes: 30
        env:
          CI: true
          NODE_ENV: production
          DATABASE_URL: file:./e2e-test.db
          NEXTAUTH_URL: http://localhost:3000
          NEXTAUTH_SECRET: test-secret-for-e2e-tests

      - name: Stop Next.js application
        if: always()
        run: |
          echo "Stopping Next.js application..."
          if [ ! -z "$APP_PID" ]; then
            kill $APP_PID || true
          fi
          # Also kill any remaining Node.js processes on port 3000
          pkill -f "next start" || true

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: |
            playwright-report/
            test-results/
          retention-days: 30

      - name: Upload screenshots on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-screenshots
          path: test-results/**/*.png
          retention-days: 30

      - name: Upload videos on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-videos
          path: test-results/**/*.webm
          retention-days: 30

      - name: Comment PR with test results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            try {
              const resultsPath = 'playwright-report/results.json';
              if (fs.existsSync(resultsPath)) {
                const results = JSON.parse(fs.readFileSync(resultsPath, 'utf8'));
                
                const { stats } = results;
                const passed = stats.expected || 0;
                const failed = stats.unexpected || 0;
                const skipped = stats.skipped || 0;
                const total = passed + failed + skipped;
                
                const emoji = failed > 0 ? '❌' : '✅';
                const status = failed > 0 ? 'FAILED' : 'PASSED';
                
                let comment = `## ${emoji} Playwright E2E Test Results\n\n`;
                comment += `**Status**: ${status}\n`;
                comment += `**Total**: ${total} tests\n`;
                comment += `**Passed**: ${passed} ✅\n`;
                comment += `**Failed**: ${failed} ❌\n`;
                comment += `**Skipped**: ${skipped} ⏭️\n\n`;
                
                if (failed > 0) {
                  comment += `### Failed Tests\n`;
                  results.suites.forEach(suite => {
                    suite.specs.forEach(spec => {
                      spec.tests.forEach(test => {
                        if (test.results.some(r => r.status === 'failed')) {
                          comment += `- ${test.title}\n`;
                        }
                      });
                    });
                  });
                  comment += `\n📸 Screenshots and videos are available in the artifacts.\n`;
                }
                
                comment += `\n🎭 **Playwright Report**: [View detailed report](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})\n`;
                comment += `_Generated by Playwright E2E Tests_`;
                
                // Find existing comment
                const comments = await github.rest.issues.listComments({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                });
                
                const existingComment = comments.data.find(
                  comment => comment.body.includes('Playwright E2E Test Results')
                );
                
                if (existingComment) {
                  await github.rest.issues.updateComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    comment_id: existingComment.id,
                    body: comment
                  });
                } else {
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: context.issue.number,
                    body: comment
                  });
                }
              }
            } catch (error) {
              console.error('Error processing test results:', error);
            }

      - name: Deploy to GitHub Pages
        if: failure() && github.event_name == 'pull_request'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./playwright-report
          destination_dir: playwright-reports/${{ github.run_id }}
          keep_files: true
