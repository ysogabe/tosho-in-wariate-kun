name: CI

on:
  push:
    branches: [main, feature/**]
  pull_request:
    branches: [main]

jobs:
  test:
    name: Test & Build
    # REQUIRED: Must use self-hosted runner exclusively
    # DO NOT change to ubuntu-latest, windows-latest, or any GitHub-hosted runner
    runs-on: self-hosted
    permissions:
      contents: read
      pull-requests: write
      issues: write

    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run type check
        run: npm run type-check

      - name: Run linter
        run: npm run lint

      - name: Run unit tests
        run: npm run test:ci

      - name: Generate test summary
        if: matrix.node-version == '20.x'
        run: |
          echo "## Test Coverage Report 📊" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Coverage |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|----------|" >> $GITHUB_STEP_SUMMARY

          # Parse coverage from Jest output
          if [ -f "coverage/coverage-summary.json" ]; then
            STATEMENTS=$(cat coverage/coverage-summary.json | jq -r '.total.statements.pct')
            BRANCHES=$(cat coverage/coverage-summary.json | jq -r '.total.branches.pct')
            FUNCTIONS=$(cat coverage/coverage-summary.json | jq -r '.total.functions.pct')
            LINES=$(cat coverage/coverage-summary.json | jq -r '.total.lines.pct')
            
            echo "| Statements | ${STATEMENTS}% |" >> $GITHUB_STEP_SUMMARY
            echo "| Branches | ${BRANCHES}% |" >> $GITHUB_STEP_SUMMARY
            echo "| Functions | ${FUNCTIONS}% |" >> $GITHUB_STEP_SUMMARY
            echo "| Lines | ${LINES}% |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🎯 **Target**: 30% (MVP Phase)" >> $GITHUB_STEP_SUMMARY
            
            if [ "$(echo "$STATEMENTS >= 30" | awk '{print ($1 >= $3)}')" = "1" ]; then
              echo "✅ **Status**: Coverage target achieved!" >> $GITHUB_STEP_SUMMARY
            else
              echo "⚠️ **Status**: Below target coverage" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "| Overall | Unable to parse |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ Coverage summary not found" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload coverage reports to Codecov
        if: matrix.node-version == '20.x'
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Comment coverage on PR
        if: matrix.node-version == '20.x' && github.event_name == 'pull_request'
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            let coverageComment = '## 📊 Test Coverage Report\n\n';

            try {
              const coverageData = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
              const { statements, branches, functions, lines } = coverageData.total;
              
              coverageComment += '| Metric | Coverage | Status |\n';
              coverageComment += '|--------|----------|--------|\n';
              coverageComment += `| Statements | ${statements.pct}% | ${statements.pct >= 30 ? '✅' : '❌'} |\n`;
              coverageComment += `| Branches | ${branches.pct}% | ${branches.pct >= 30 ? '✅' : '❌'} |\n`;
              coverageComment += `| Functions | ${functions.pct}% | ${functions.pct >= 30 ? '✅' : '❌'} |\n`;
              coverageComment += `| Lines | ${lines.pct}% | ${lines.pct >= 30 ? '✅' : '❌'} |\n\n`;
              
              coverageComment += `🎯 **Target**: 30% (MVP Phase)\n`;
              coverageComment += `📈 **Overall**: ${statements.pct >= 30 ? '✅ Target achieved!' : '⚠️ Below target'}\n\n`;
              
              coverageComment += '_Generated by GitHub Actions CI_';
            } catch (error) {
              coverageComment += '⚠️ Unable to parse coverage data\n\n';
              coverageComment += '_Coverage report generation failed_';
            }

            // Find existing coverage comment
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const existingComment = comments.data.find(
              comment => comment.body.includes('📊 Test Coverage Report')
            );

            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: coverageComment
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: coverageComment
              });
            }

      - name: Build application
        run: npm run build

      - name: Cache build artifacts
        if: matrix.node-version == '20.x'
        uses: actions/cache@v4
        with:
          path: .next
          key: ${{ runner.os }}-nextjs-${{ hashFiles('package-lock.json') }}-${{ hashFiles('**/*.ts', '**/*.tsx', '**/*.js', '**/*.jsx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('package-lock.json') }}-

  build-check:
    name: Build Check (Production)
    # REQUIRED: Must use self-hosted runner exclusively
    # DO NOT change to ubuntu-latest, windows-latest, or any GitHub-hosted runner
    runs-on: self-hosted
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build for production
        run: npm run build
        env:
          NODE_ENV: production

      - name: Check build size
        run: |
          echo "Build completed successfully"
          ls -la .next/
          du -sh .next/
