name: Playwright E2E Tests

on:
  push:
    branches: [main, feature/**]
  pull_request:
    branches: [main]

jobs:
  playwright-tests:
    name: Playwright E2E Tests
    # REQUIRED: Must use self-hosted runner exclusively
    runs-on: self-hosted
    permissions:
      contents: read
      pull-requests: write
      actions: read
      pages: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Start development server
        run: |
          npm run dev &
          npx wait-on http://localhost:3000 --timeout 60000
        env:
          NODE_ENV: test

      - name: Run Playwright tests
        run: npm run test:e2e:ci
        env:
          CI: true

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: |
            playwright-report/
            test-results/
          retention-days: 30

      - name: Upload screenshots on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-screenshots
          path: test-results/**/*.png
          retention-days: 30

      - name: Upload videos on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-videos
          path: test-results/**/*.webm
          retention-days: 30

      - name: Comment PR with test results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            try {
              const resultsPath = 'playwright-report/results.json';
              if (fs.existsSync(resultsPath)) {
                const results = JSON.parse(fs.readFileSync(resultsPath, 'utf8'));
                
                const { stats } = results;
                const passed = stats.expected || 0;
                const failed = stats.unexpected || 0;
                const skipped = stats.skipped || 0;
                const total = passed + failed + skipped;
                
                const emoji = failed > 0 ? '❌' : '✅';
                const status = failed > 0 ? 'FAILED' : 'PASSED';
                
                let comment = `## ${emoji} Playwright E2E Test Results\n\n`;
                comment += `**Status**: ${status}\n`;
                comment += `**Total**: ${total} tests\n`;
                comment += `**Passed**: ${passed} ✅\n`;
                comment += `**Failed**: ${failed} ❌\n`;
                comment += `**Skipped**: ${skipped} ⏭️\n\n`;
                
                if (failed > 0) {
                  comment += `### Failed Tests\n`;
                  results.suites.forEach(suite => {
                    suite.specs.forEach(spec => {
                      spec.tests.forEach(test => {
                        if (test.results.some(r => r.status === 'failed')) {
                          comment += `- ${test.title}\n`;
                        }
                      });
                    });
                  });
                  comment += `\n📸 Screenshots and videos are available in the artifacts.\n`;
                }
                
                comment += `\n🎭 **Playwright Report**: [View detailed report](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})\n`;
                comment += `_Generated by Playwright E2E Tests_`;
                
                // Find existing comment
                const comments = await github.rest.issues.listComments({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                });
                
                const existingComment = comments.data.find(
                  comment => comment.body.includes('Playwright E2E Test Results')
                );
                
                if (existingComment) {
                  await github.rest.issues.updateComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    comment_id: existingComment.id,
                    body: comment
                  });
                } else {
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: context.issue.number,
                    body: comment
                  });
                }
              }
            } catch (error) {
              console.error('Error processing test results:', error);
            }

      - name: Deploy to GitHub Pages
        if: always()
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./playwright-report
          destination_dir: playwright-reports/${{ github.run_id }}

  # 通知ジョブ（失敗時）
  notify-failure:
    name: Notify on Failure
    runs-on: self-hosted
    needs: playwright-tests
    if: failure()
    
    steps:
      - name: Create failure issue
        uses: actions/github-script@v7
        with:
          script: |
            const title = `🎭 Playwright E2E Test Failure - ${new Date().toISOString().split('T')[0]}`;
            const body = `
            ## Playwright E2E Test Failure

            **Run ID**: ${{ github.run_id }}
            **Branch**: ${{ github.ref_name }}
            **Commit**: ${{ github.sha }}
            **Actor**: ${{ github.actor }}

            ### Details
            - **Workflow**: ${{ github.workflow }}
            - **Job**: ${{ github.job }}
            - **Repository**: ${{ github.repository }}

            ### Actions
            - [ ] Review test failures
            - [ ] Check screenshots and videos
            - [ ] Fix failing tests
            - [ ] Re-run tests

            ### Links
            - [Workflow Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - [Commit](https://github.com/${{ github.repository }}/commit/${{ github.sha }})

            _Auto-generated by GitHub Actions_
            `;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['bug', 'e2e-test', 'playwright']
            });